* HTML + CSS notes

    Tags (<p></p>, <h1></h1>, <title></title>...etc) or comepleted tags 
    are known as elements and can also be called 'selectors'.
    In scrimba CSS examples, there are three primary ways to 
    select elements:
        - Element selectors
        - Class selectors
        - ID selectors
    (there are others, but these are the most common.)


    * The box model
        Block level elements have a default width of 100% and a height of zero.
        We can control their width and height, as well as add spacing using
        margin and paddin, as well as borders.


    * Margin vs Padding
        As a general rule of thumb:
        If you need empty space, use Margin
        If you more background, use Padding

    * Semantics HTML 
        We've looked at different elements for content:
            - Headings
            - Paragraphs
            - Links
            - List
        
        To organize this content, we can use different elements:
            - <heading>
            - <main>
            - <nav>
            - <section>
            - <article>
            - <footer>

        We use these elements to group and organize content.
        The element describes what the content inside it is.

    * Classes and IDs 
        What if we have three <section>s on a page, but we want 
        them to be different? 
        (Answer)
        We can use a class or ID to distinguish one <section> from
        another. Think of them like adding names to your element. 

        Classes
            In CSS, we can select a class by putting a period (.) 
            before it's name:
            .bg-dark {
                background: black;
            }

        IDs 
            In CSS, we can select an ID by putting
            a (#) before it's name:
            #intro {
                background: black;
            }

        When naming classes and IDs:
            - do not use spaces
            - do not start them with a number
            - be descriptive

        Classes vs IDs 
            There are some important differences between the two:
                - IDs can only be used one time per page
                - Classes can be used over and over 
                - IDs will overwrite a class selector 
            (ID > Class > element selectors)

            *Rule of thumb*
            Because of those differences, most people prefer using
            only classes for styling purposes.
        
    * Spans
        Spans are inline elements, similar to <em> and <strong>, but 
        they don't have any default styling!
        We can use spans to change the font itself, or the weight, color,
        style and more.
        Because spans can do so much, in general you'll use a class to 
        give the span a purpose e.g 

        <p> this is a <span class="text-test"> test for span</span></p>

    * Divs 
        Divs are used to group content, but like a span, they 
        no semantics meaning.
        We use them to group content in order to control our layouts, 
        for the most part.
        A div is super generic, and you will very rarely use one without
        giving it a class. 

        Centering content
        we can center text, which deals with alignment, and we can
        center elements within the viewport.
        This is the easy one, where we can use
        e.g text-align: center

        We have to remember to center an element on the page, we 
        need to declare:
            - a width
            - margin-left and margin-right of auto

    * Creating columns
        Flexbox is a CSS layout tool.
        When we declare display:flex on an element, all it's direct
        children will become columns.
        e.g
        .selector {
            display:flex
        }

    * Background images
        Unlike regular images, background images are not content, 
        they are decoration.
            - Hard to control the exact positioning
            - No alt text
            e.g 
            .selector {
                background-image: url("IMAGE_LOCATION/filename.jpg");
            }    
            
    * Relative file paths
        e.g 
            .selector {
                background-image: url("../FOLDER_NAME/filename.jpg");
            }